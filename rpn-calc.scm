(import (chicken io))

(define (list-head list k)
  (if (zero? k)
	  '()
	  (cons (car list)
			(list-head (cdr list) (sub1 k)))))

(define (apply-on-stack proc num-args stack)
  (if (>= (length stack) num-args)
	  (cons (apply proc (list-head stack num-args))
			(list-tail stack num-args))
	  stack))

(define (read-command stack)
  (let* ((input-string (read-line))
		 (input-number (string->number input-string)))
	(if (number? input-number)
		(cons input-number stack)
		(cond
		 ((string=? input-string "exit") #f)
		 ((string=? input-string "clr") '())
		 ((string=? input-string "rem") (if (eqv? stack '()) '() (cdr stack)))
		 ((string=? input-string "pi") (cons (acos -1) stack))
		 ((string=? input-string "golden") (cons (/ (+ 1 (sqrt 5)) 2) stack))
		 ((string=? input-string "silver") (cons (+ 1 (sqrt 2)) stack))
		 (else (apply apply-on-stack
					  (cond
					   ((string=? input-string "+") (list + 2 stack))
					   ((string=? input-string "-") (list - 2 stack))
					   ((string=? input-string "*") (list * 2 stack))
					   ((string=? input-string "/") (list / 2 stack))
					   ((string=? input-string "abs") (list abs 1 stack))
					   ((string=? input-string "mod") (list modulo 2 stack))
					   ((string=? input-string "exp") (list exp 1 stack))
					   ((string=? input-string "log") (list log 1 stack))
					   ((string=? input-string "sin") (list sin 1 stack))
					   ((string=? input-string "cos") (list cos 1 stack))
					   ((string=? input-string "tan") (list tan 1 stack))
					   ((string=? input-string "asin") (list asin 1 stack))
					   ((string=? input-string "acos") (list acos 1 stack))
					   ((string=? input-string "atan") (list atan 1 stack))
					   ((string=? input-string "sqrt") (list sqrt 1 stack))
					   ((string=? input-string "expt") (list expt 2 stack))
					   ((string=? input-string "exact") (list inexact->exact 1 stack))
					   ((string=? input-string "inexact") (list exact->inexact 1 stack))
					   (else (list values 1 stack)))))))))

(define (main args)
  (do ((stack '() (read-command stack)))
      ((eqv? stack #f) '())
    (begin (print ">>> " stack)(print* "<<< "))))
				
